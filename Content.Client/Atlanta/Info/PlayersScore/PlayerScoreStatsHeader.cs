using Content.Client.Info.PlaytimeStats;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;

namespace Content.Client.Atlanta.Info.PlayersScore;

[GenerateTypedNameReferences]
public sealed partial class PlayerScoreStatsHeader : Control
{
    public event Action<Header>? OnHeaderClicked;

    private Header _sortDirection = Header.WinScore;

    public enum Header : byte
    {
        Nickname,
        WinScore,
        Kills,
    }

    public PlayerScoreStatsHeader()
    {
        RobustXamlLoader.Load(this);

        NicknameLabel.OnKeyBindDown += NicknameClicked;
        WinScoreLabel.OnKeyBindDown += WinScoreClicked;
        KillsLabel.OnKeyBindDown += KillsClicked;
    }

    private void HeaderClicked(GUIBoundKeyEventArgs args, Header header)
    {
        if (args.Function != EngineKeyFunctions.UIClick)
        {
            return;
        }

        _sortDirection = header;

        UpdateLabels();
        OnHeaderClicked?.Invoke(header);
        args.Handle();
    }

    private void UpdateLabels()
    {
        NicknameLabel.Text = Loc.GetString("nickname") +
                             (_sortDirection == Header.Nickname ? " ↓" : " ↑");
        WinScoreLabel.Text = Loc.GetString("win score") +
                             (_sortDirection == Header.WinScore ? " ↓" : " ↑");
        KillsLabel.Text = Loc.GetString("kills") +
                             (_sortDirection == Header.Kills ? " ↓" : " ↑");
    }

    private void NicknameClicked(GUIBoundKeyEventArgs args)
    {
        HeaderClicked(args, Header.Nickname);
    }

    private void WinScoreClicked(GUIBoundKeyEventArgs args)
    {
        HeaderClicked(args, Header.WinScore);
    }

    private void KillsClicked(GUIBoundKeyEventArgs args)
    {
        HeaderClicked(args, Header.Kills);
    }
}

